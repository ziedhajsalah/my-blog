{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/introduction-to-flexbox/","result":{"data":{"site":{"siteMetadata":{"title":"Drafts"}},"mdx":{"id":"0fd313f7-7f07-57b5-8897-1de394c70bbe","excerpt":"FlexBox Course Introduction Parent Element Child elements Space Management Alignment Ordering Use Cases Responsive design","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introduction to FlexBox\",\n  \"date\": \"2020-01-18T19:20:03.284Z\",\n  \"description\": \"An introduction to flexbox for xtech training\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"FlexBox Course\"), mdx(\"h2\", null, \"Introduction\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"The flex box model is composed of two type of elements: The flex container (or the parent element) and the flex items (or children elements).\\nAn element becomes a flex container by adding a css property `display: flex` to it.\"))), mdx(\"h2\", null, \"Parent Element\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"The flex container properties:\\n\\n    - `flex-direction`: defines in which direction the container wants to stack the flex items.\\n        - `row` (default)\\n        - `column`\\n        - `row-reverse`\\n        - `column-reverse`\\n    - `flex-wrap`: specifies whether the flex items should wrap or not.\\n        - `no-wrap` (default)\\n        - `wrap` elements will wrap if needed\\n        - `wrap-reverse` elements will wrap if needed in reverse order.\\n    - `flex-flow`: shorthand property for setting both the `flex-direction` and `flex-wrap` properties.\\n    - `justify-content`: used to align the flex items horizontally.\\n        - `flex-start` (default)\\n        - `flex-end`\\n        - `center`\\n        - `space-around`\\n        - `space-between`\\n    - `align-items`: used to align the flex items vertically.\\n        - `stretch` (default): fill the container.\\n        - `flex-start`: top of the container.\\n        - `flex-en`: bottom of the container.\\n        - `center`: middle of the container.\\n        - `baseline`: baselines of the items.\\n    - `align-content`: used to align the flex lines.\\n        - `stretch`: take the remaining space \\n        - `space-between`: have equal spaces between lines.\\n        - `space-around`: have spaces before/between/after line.\\n        - `center`: lines in the middle of the container.\\n        - `flex-start`: top of the container \\n        - `flex-end`: bottom of the container\"))), mdx(\"h2\", null, \"Child elements\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"The flex items properties:\\n    - `order`: specifies the order of the element. Default value is 0, means the elements are ordered like their order in the DOM.\\n    - `flex-grow`: specifies how much an item will grow relative to the other items. Default value is 0.\\n    - `flex-shrink`: specifies how much an item will shrink relative to the other items. Default value is 1. Value 0 means don\\u2019t shrink.\\n    - `flex-basis`: specifies the length (width or height following flex direction) of the item.\\n    - `flex`: shorthand for `flex-grow flex-shrink flex-basis`.\\n    - `align-self`: overrides the alignment specified in the container for `align-items` for the corresponding item\"))), mdx(\"h2\", null, \"Space Management\"), mdx(\"h2\", null, \"Alignment\"), mdx(\"h2\", null, \"Ordering\"), mdx(\"h2\", null, \"Use Cases\"), mdx(\"h3\", null, \"Responsive design\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Introduction to FlexBox","date":"January 18, 2020","description":"An introduction to flexbox for xtech training"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/introduction-to-flexbox/","previous":null,"next":null}}}